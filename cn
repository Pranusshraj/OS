GUI Client ---------------------------------------------------------------------------------------------------------------------------------------------
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;

public class SocketClient extends JFrame {
    private JTextArea textArea;
    private JTextField textField;
    private JButton sendButton;
    private JLabel connectionLabel;
    private DataInputStream din;
    private DataOutputStream dout;
    private Socket socket;

    public SocketClient() {
        setTitle("Client");
        setSize(400, 400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        // Connection status label
        connectionLabel = new JLabel("Connected to Server at localhost:3333");
        add(connectionLabel, BorderLayout.NORTH);

        // Text area for chat messages
        textArea = new JTextArea();
        textArea.setEditable(false);
        add(new JScrollPane(textArea), BorderLayout.CENTER);

        // Panel for input field and send button
        JPanel inputPanel = new JPanel(new BorderLayout());
        textField = new JTextField();
        sendButton = new JButton("Send");

        inputPanel.add(textField, BorderLayout.CENTER);
        inputPanel.add(sendButton, BorderLayout.EAST);
        add(inputPanel, BorderLayout.SOUTH);

        // Button action to send message
        sendButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    String message = textField.getText();
                    dout.writeUTF(message);
                    dout.flush();
                    textField.setText("");
                } catch (IOException ex) {
                    textArea.append("Error sending message.\n");
                }
            }
        });

        // Establish connection
        try {
            socket = new Socket("localhost", 3333);
            din = new DataInputStream(socket.getInputStream());
            dout = new DataOutputStream(socket.getOutputStream());

            // Thread to receive messages
            new Thread(() -> {
                try {
                    String received;
                    while (!(received = din.readUTF()).equals("stop")) {
                        textArea.append("Server: " + received + "\n");
                    }
                } catch (IOException ex) {
                    textArea.append("Disconnected from server.\n");
                }
            }).start();

        } catch (Exception ex) {
            textArea.append("Unable to connect to server.\n");
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new SocketClient().setVisible(true));
    }
}



GUI Server ---------------------------------------------------------------------------------------------------------------------------------------------
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;

public class SocketServer extends JFrame {
    private JTextArea textArea;
    private JTextField textField;
    private JButton sendButton;
    private JLabel connectionLabel;
    private DataInputStream din;
    private DataOutputStream dout;
    private ServerSocket serverSocket;
    private Socket socket;

    public SocketServer() {
        setTitle("Server");
        setSize(400, 400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        // Connection status label
        connectionLabel = new JLabel("Waiting for connection on port 3333...");
        add(connectionLabel, BorderLayout.NORTH);

        // Text area for chat messages
        textArea = new JTextArea();
        textArea.setEditable(false);
        add(new JScrollPane(textArea), BorderLayout.CENTER);

        // Panel for input field and send button
        JPanel inputPanel = new JPanel(new BorderLayout());
        textField = new JTextField();
        sendButton = new JButton("Send");

        inputPanel.add(textField, BorderLayout.CENTER);
        inputPanel.add(sendButton, BorderLayout.EAST);
        add(inputPanel, BorderLayout.SOUTH);

        // Button action to send message
        sendButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    String message = textField.getText();
                    dout.writeUTF(message);
                    dout.flush();
                    textField.setText("");
                } catch (IOException ex) {
                    textArea.append("Error sending message.\n");
                }
            }
        });

        // Establish server connection
        new Thread(() -> {
            try {
                serverSocket = new ServerSocket(3333);
                socket = serverSocket.accept();
                connectionLabel.setText("Client connected: " + socket.getInetAddress());
                din = new DataInputStream(socket.getInputStream());
                dout = new DataOutputStream(socket.getOutputStream());

                // Thread to receive messages
                String received = = din.readUTF()
                while (!received.equals("stop")) {
                    textArea.append("Client: " + received + "\n");
                }
            } catch (Exception ex) {
                textArea.append("Connection error.\n");
            }
        }).start();
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new SocketServer().setVisible(true));
    }
}



FTP Server ---------------------------------------------------------------------------------------------------------------------------------------------
import java.io.*;
import java.net.*;

public class FTPServer {
    public static void main(String[] args) {
        ServerSocket serverSocket = null;
        Socket socket = null;
        DataInputStream dis = null;
        FileOutputStream fos = null;

        try {
            serverSocket = new ServerSocket(3333);
            System.out.println("Server is running and waiting for a connection...");

            socket = serverSocket.accept();
            System.out.println("Client connected: " + socket.getInetAddress());

            dis = new DataInputStream(socket.getInputStream());

            // Receiving the destination file path and file name
            String filePath = dis.readUTF();
            System.out.println("Saving file as: " + filePath);

            // Creating a file output stream to save the file
            fos = new FileOutputStream(filePath);

            // Reading file data and saving it
            byte[] buffer = new byte[4096];
            int bytesRead;
            while ((bytesRead = dis.read(buffer)) > 0) {
                fos.write(buffer, 0, bytesRead);
            }

            System.out.println("File received and saved successfully.");
        } catch (IOException e) {
            System.out.println("Error: " + e.getMessage());
        } finally {
            try {
                if (fos != null) fos.close();
                if (dis != null) dis.close();
                if (socket != null) socket.close();
                if (serverSocket != null) serverSocket.close();
            } catch (IOException e) {
                System.out.println("Error closing resources: " + e.getMessage());
            }
        }
    }
}



FTP Client ---------------------------------------------------------------------------------------------------------------------------------------------
import java.io.*;
import java.net.*;
import java.util.Scanner;

public class FTPClient {
    public static void main(String[] args) {
        Socket socket = null;
        DataOutputStream dos = null;
        FileInputStream fis = null;
        Scanner scanner = new Scanner(System.in);

        try {
            socket = new Socket("localhost", 3333);
            System.out.println("Connected to the server.");

            dos = new DataOutputStream(socket.getOutputStream());

            // Prompt user to enter the path of the file to send
            System.out.print("Enter the path of the file to send: ");
            String filePath = scanner.nextLine();

            // Prompt user to enter the destination path and name on the server
            System.out.print("Enter the destination path and file name to save on the server: ");
            String destinationPath = scanner.nextLine();

            // Sending the destination path and filename to the server
            dos.writeUTF(destinationPath);

            // Reading the file and sending its data
            fis = new FileInputStream(filePath);
            byte[] buffer = new byte[4096];
            int bytesRead;
            while ((bytesRead = fis.read(buffer)) > 0) {
                dos.write(buffer, 0, bytesRead);
            }

            System.out.println("File sent successfully.");
        } catch (IOException e) {
            System.out.println("Error: " + e.getMessage());
        } finally {
            try {
                if (fis != null) fis.close();
                if (dos != null) dos.close();
                if (socket != null) socket.close();
            } catch (IOException e) {
                System.out.println("Error closing resources: " + e.getMessage());
            }
        }
    }
}



CLI Client ---------------------------------------------------------------------------------------------------------------------------------------------
import java.net.*;  
import java.io.*;  
class SocketClient{  
	public static void main(String args[])throws Exception{  
		Socket s=new Socket("localhost",3333);  
		DataInputStream din=new DataInputStream(s.getInputStream());  
		DataOutputStream dout=new DataOutputStream(s.getOutputStream());  
		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));  
  
		String str="",str2="";  
		while(!str.equals("stop")){  
			str=br.readLine();  
			dout.writeUTF(str);  
			dout.flush();  
			str2=din.readUTF();  
			System.out.println("Server says: "+str2);  
		}  
  
		dout.close();  
		s.close();  
	}
}  


CLI Server ---------------------------------------------------------------------------------------------------------------------------------------------
import java.net.*;  
import java.io.*;  
class SocketServer{  
	public static void main(String args[])throws Exception{  
		ServerSocket ss = new ServerSocket(3333);  
		Socket s = ss.accept();  
		DataInputStream din=new DataInputStream(s.getInputStream());  
		DataOutputStream dout=new DataOutputStream(s.getOutputStream());  
		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));  
  
		String str="",str2="";  
		while(!str.equals("stop")){  
			str=din.readUTF();  
			System.out.println("client says: "+str);  
			str2=br.readLine();  
			dout.writeUTF(str2);  
			dout.flush();  
		}  
		din.close();  
		s.close();  
		ss.close();  
	}
} 


MyServer.java
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
import java.net.*;
import java.rmi.*;

public class MyServer
{
	public static void main(String[] arg)
	{
		try 	
		{
			MyServerImpl asi = new MyServerImpl();
			Naming.rebind("RMServer",asi);	//remote object associate with name 
			System.out.println("\nServer Started...");
		}
		catch(Exception e)
		{
			System.out.println("Exception: "+e);
		}
	}
}
MyClient.java
-------------
import java.net.*;
import java.rmi.*;

public class MyClient
{
	public static void main(String[] arg)
	{
		try 	
		{
		String sName = "rmi://"+arg[0]+"/RMServer";
		
		MyServerIntf asif = (MyServerIntf)Naming.lookup(sName);  // requesting remote objects on    // the server
			
		double d1=2000,d2=500;

		System.out.println("Addition: "+asif.add(d1,d2));

		}
		catch(Exception e)
		{
			System.out.println("Exception: "+e);
		}
	}
}

MyServerImpl
------------
import java.rmi.*;
import java.rmi.server.*;

// UnicastRemoteObject supports for point-to-point active object references (invocations, parameters, and // results) using TCP streams.

public class MyServerImpl extends UnicastRemoteObject implements MyServerIntf
{
	MyServerImpl() throws RemoteException
	{}

	public double add(double a, double b) throws RemoteException
	{
		return(a+b);
	}	
}

MyServerIntf
------------
//function prototype
import java.rmi.*;

public interface MyServerIntf extends Remote		//remote interface
{	int i=0;
	double add(double a, double b) throws RemoteException;
}



-----------------------------------------------------------------------------------------------------------------------------------------
analysis.awk
-----------
BEGIN {
  rec= 0
  drp=0
  tot=0
  rat=0.0
  sum=0
  sum1=0
  throughput=0.0
  throughput1=0.0
}

{
  
  if($1== "r" && $4== 4)
    {
    
      rec++
    }
    
    
   if($1== "d" && $4 ==4 )
     
     {
       drp++
       
     }
     
     
     
     if($2<1.00 && $4==4)
      {
     
          sum=sum+$6
 
      }
 
    if($2<1.00 && $4==5)
      {
     
          sum1=sum1+$6
 
      }
 
 }
 
 
  
END {
   
      tot = rec + drp
      rat = (rec/tot) *100
      throughput= (sum*8)/1000000
      throughput1=(sum1*8)/1000000
       printf(" \n Packets received %d ", rec)
       printf(" \n Packets dropped %d ", drp)
       printf("\n Packets delivery ratio %f",rat)
        printf("\n Throughput for udp is %f",throughput)
         
        printf("\n Throughput for tcp is %f",throughput1)
     }

wired.tcl
----------
set ns [new Simulator]

$ns color 0 blue
$ns color 1 black


set tr [open droptail-queue-out.tr w]
$ns trace-all $tr

set ftr [open droptail-queue-out.nam w]
$ns namtrace-all $ftr

set n0 [$ns node]
set n1 [$ns node]
set n2 [$ns node]
set n3 [$ns node]
set n4 [$ns node]
set n5 [$ns node]

$ns duplex-link $n0 $n2 5Mb 2ms DropTail
$ns duplex-link $n1 $n2 10Mb 5ms DropTail
$ns duplex-link $n2 $n3 4Mb 3ms DropTail
$ns duplex-link $n3 $n4 100Mb 2ms DropTail
$ns duplex-link $n3 $n5 15Mb 4ms DropTail

set udp [new Agent/UDP]

$udp set fid_ 1
set null [new Agent/Null]

$ns attach-agent $n0 $udp 
$ns attach-agent $n4 $null
$ns connect $udp $null

set tcp [new Agent/TCP]
$tcp set fid_ 0
set sink [new Agent/TCPSink]
$ns attach-agent $n1 $tcp
$ns attach-agent $n5 $sink
$ns connect $tcp $sink
$ns connect $tcp $sink

set cbr [new Application/Traffic/CBR]
$cbr attach-agent $udp
$cbr set interval 0.020

set ftp [new Application/FTP]
$ftp attach-agent $tcp

$ftp set interval 0.020
proc finish {} {
           global ns tr ftr
           $ns flush-trace
           close $tr
           close $ftr
           exec nam droptail-queue-out.nam &
           exec gawk -f analysis.awk droptail-queue-out.tr &
           exit
}

$ns at 0.1 "$cbr start"
$ns at 2.0 "$cbr stop"
$ns at 0.1 "$ftp start"
$ns at 2.0 "$ftp stop"
$ns at 2.1 "finish"

$ns run



-----------------------------------
